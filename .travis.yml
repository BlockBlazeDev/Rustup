matrix:
  include:
    - os: linux
      env: TARGET=i686-unknown-linux-gnu BITS=32
      dist: trusty
    - os: linux
      env: TARGET=x86_64-unknown-linux-gnu BITS=64
      dist: trusty
    - os: osx
      env: TARGET=i686-apple-darwin BITS=32 MACOSX_DEPLOYMENT_TARGET=10.7
    - os: osx
      env: TARGET=x86_64-apple-darwin BITS=64 MACOSX_DEPLOYMENT_TARGET=10.7

git:
  submodules: false

sudo: required
services:
  - docker
install:
  # Set git user for pushing binaries
  - git config --global user.email "diggsey@googlemail.com"
  - git config --global user.name "Diggory Blake (via Travis CI)"
  - git config --global push.default simple
  # Download nightly rust
  - mkdir -p ~/rust
  - echo -e "\033[33;1mDownloading Rust\033[0m"
  - curl -sL http://static.rust-lang.org/dist/rust-nightly-$TARGET.tar.gz | tar --strip-components=1 -C ~/rust -xzf -
  # For 32-bit platforms, install the necessary cross-toolchain
  - if [ "$TARGET" == "i686-unknown-linux-gnu" ]; then
      sudo dpkg --add-architecture i386;
      sudo apt-get update;
      sudo apt-get install -y libc6-dev:i386 libstdc++6:i386 zlib1g-dev:i386 libssl-dev:i386 pkg-config:i386 gcc-multilib;
    fi
  # Install nightly rust
  - echo -e "\033[33;1mInstalling Rust\033[0m"
  - sudo ~/rust/install.sh

script:
  # Run linux builds in a docker container to improve portability of the resulting binaries
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      docker run
        --entrypoint bash
        -u `id -u`:`id -g`
        -v /usr/local:/usr/local:ro
        -v `pwd`:/buildslave
        -v $HOME:/home/rustbuild
        -e HOME=/home/rustbuild
        -e LD_LIBRARY_PATH=/usr/local/lib
        -e OPENSSL_STATIC=1
        -e OPENSSL_LIB_DIR=/rustroot/cargo$BITS/lib
        -it alexcrichton/rust-slave-dist:2015-10-20b
        -c "cargo build --release --verbose";
    else
      cargo build --release --verbose;
    fi
  # Compute sha-256 hashes of all build artifacts
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      find "target/release/" -maxdepth 1 -type f -exec sh -c 'shasum -a 256 -b "{}" | cut -d\  -f1 > "{}.sha256"' \;;
    else
      find "target/release/" -maxdepth 1 -type f -exec sh -c 'sha256sum -b "{}" | cut -d\  -f1 > "{}.sha256"' \;;
    fi
  # Run cargo tests
  - cargo test --verbose
  - cargo test -p rust-install --verbose
  - cargo test -p rust-manifest --verbose
  # Run end-to-end tests
  - tests/cli.sh

after_success:
  # Install kcov dependencies
  - sudo apt-get install libcurl4-openssl-dev libelf-dev libdw-dev &&
  # Download and build rust-compatible version of kcov
  - wget https://github.com/SimonKagstrom/kcov/archive/master.tar.gz &&
  - tar xzf master.tar.gz && mkdir kcov-master/build && cd kcov-master/build && cmake .. && make &&
  - sudo make install && cd ../.. &&
  # Generate code coverage
  - kcov --coveralls-id=$TRAVIS_JOB_ID --exclude-pattern=/.cargo target/kcov target/debug/*-* rust-install/target/debug/*-* rust-manifest/target/debug/*-*

  # Build documentation and push release binaries
  - if [ "$TRAVIS_PULL_REQUEST" == "false" ]; then
      # Set git credentials for pushing binaries
      git config --global credential.helper store;
      echo "https://${TOKEN}:x-oauth-basic@github.com" >> ~/.git-credentials;

      # Only build documentation on master branch
      if [ "$TRAVIS_BRANCH" == "master" ]; then
        # Only build documentation for 64-bit linux target
        if [ "$TARGET" == "x86_64-unknown-linux-gnu" ]; then
          # Build and push documentation to github pages
          cargo doc;
          echo '<meta http-equiv=refresh content=0;url=multirust/index.html>' > target/doc/index.html;
          sudo pip install ghp-import;
          ghp-import -n target/doc;
          git push -qf https://${TOKEN}@github.com/${TRAVIS_REPO_SLUG}.git gh-pages;
        fi;

        # Binaries for master go directly in binaries submodule
        bin=./binaries/$TARGET;
      else
        # Binaries for other branches are namespaced accordingly
        bin=./binaries/$TRAVIS_BRANCH/$TARGET;
      fi;

      # Initialise binaries submodule shallowly
      git submodule init;
      git submodule update --depth 1 --remote;

      # Remove old binaries and copy across new ones
      mkdir -p "$bin";
      rm $bin/*;
      find "target/release/" -maxdepth 1 -type f -exec cp "{}" "$bin" \;;
      git rev-parse HEAD > "$bin/commit.txt";

      # Commit and push changes
      cd binaries;
      git checkout master;
      git add -A;
      git commit -m "Auto-update $TRAVIS_BRANCH/$TARGET binaries (Travis CI)";
      for i in {1..5}; do ./push-changes.sh && break; done;
    fi
