image: Visual Studio 2017

branches:
  # whitelist
  only:
    - master
    - stable
    - auto
cache:
  - '%USERPROFILE%\.cargo\'
  - target
# before cache
after_test:
  - set CARGO_TARGET_DIR=%APPVEYOR_BUILD_FOLDER%\target
  - cargo install
      --debug
      --force
      --git https://github.com/matthiaskrgr/cargo-cache
      --no-default-features
      --features ci-autoclean
      --bin cargo-cache
      --
      cargo-cache
  - cargo cache

environment:
  global:
    RUSTFLAGS: -Ctarget-feature=+crt-static
    RUST_BACKTRACE: 1
  matrix:
    - TARGET: x86_64-pc-windows-msvc
      NO_ADD: 1
      ALLOW_PR: 1
    - TARGET: i686-pc-windows-msvc
    - TARGET: x86_64-pc-windows-gnu
      MINGW_DIR: mingw64
    - TARGET: i686-pc-windows-gnu
      MINGW_DIR: mingw32
  access_token:
    secure: q8Wqx0brgfpOYFQqWauvucE2h0o1WYb41a3gKaCKV9QiE4eTz6qLNlqyC3mdsp4Q

matrix:
  fast_finish: true     # set this flag to immediately finish build once one of the jobs fails.

install:
  # If this is a PR and we're not allowed to test PRs, skip the whole build.
  # Also if we're on the master branch no need to run the full test suite, so
  # just do a smoke test.
  - if defined APPVEYOR_PULL_REQUEST_NUMBER if NOT defined ALLOW_PR appveyor exit
  - if "%APPVEYOR_REPO_BRANCH%" == "master" if NOT defined ALLOW_PR appveyor exit

  # Install MSYS2 and MINGW (32-bit & 64-bit)
  - ps: |
      # Check if MSYS2 was restored from cache
      if($env:MINGW_DIR) {
        if($env:MINGW_DIR -eq "mingw32") {
          # Download and install MINGW (32-bit)
          Write-Host "Installing MinGW (32-bit)..." -ForegroundColor Cyan
          Write-Host "Downloading installation package..."
          appveyor-retry appveyor DownloadFile https://rust-lang-ci.s3.amazonaws.com/i686-4.9.2-release-win32-dwarf-rt_v4-rev4.7z -FileName mingw.7z
        } elseif($env:MINGW_DIR -eq "mingw64") {
          # Download and install MINGW (64-bit)
          Write-Host "Installing MinGW (64-bit)..." -ForegroundColor Cyan
          Write-Host "Downloading installation package..."
          appveyor-retry appveyor DownloadFile https://rust-lang-ci.s3.amazonaws.com/x86_64-4.9.2-release-win32-seh-rt_v4-rev4.7z -FileName mingw.7z
        }
        Write-Host "Extracting installation package..."
        7z x -y mingw.7z -oC:\msys64 | Out-Null
        del mingw.7z
      } else {
        Write-Host "MSYS2 not required" -ForegroundColor Green
      }

  # Install rust, x86_64-pc-windows-msvc host
  - appveyor-retry appveyor DownloadFile https://win.rustup.rs/ -FileName rustup-init.exe
  - rustup-init.exe -y --default-host=x86_64-pc-windows-msvc --profile=minimal
  - set PATH=%PATH%;%USERPROFILE%\.cargo\bin
  - del rustup-init.exe

  # Install the target we're compiling for
  - if NOT "%TARGET%" == "x86_64-pc-windows-msvc" rustup target add %TARGET%

  # add mingw to PATH if necessary
  - if defined MINGW_DIR set PATH=C:\msys64\%MINGW_DIR%\bin;C:\msys64\usr\bin;%PATH%
  # And if mingw, re-put appveyor's git in place
  - if defined MINGW_DIR set PATH=C:\Program Files\Git\cmd;%PATH%

  # let's see what we got
  - where gcc rustc cargo
  - rustc -vV
  - cargo -V

# Build settings, not to be confused with "before_build" and "after_build".
build: false

build_script:
  - cargo build --release --target %TARGET% --locked
  - cargo run --release --target %TARGET% --locked -- --dump-testament

test_script:
  # The rest of this relies on the set of things to test not changing
  # because I have no idea how to script it.  TODO: Get someone to script it?
  - cargo test --release --target %TARGET% -p download
  - cargo test --release --target %TARGET% --bin rustup-init
  - cargo test --release --target %TARGET% --lib --all
  - cargo test --release --target %TARGET% --doc --all
  - cargo test --release --target %TARGET% --test cli-exact
  - cargo test --release --target %TARGET% --test cli-inst-interactive
  - cargo test --release --target %TARGET% --test cli-misc
  - cargo test --release --target %TARGET% --test cli-rustup
  - cargo test --release --target %TARGET% --test cli-self-upd
  - cargo test --release --target %TARGET% --test cli-v1
  - cargo test --release --target %TARGET% --test cli-v2
  - cargo test --release --target %TARGET% --test dist_install
  - cargo test --release --target %TARGET% --test dist_manifest
  - cargo test --release --target %TARGET% --test dist -- --test-threads 1
  - cargo test --release --target %TARGET% --test dist_transactions

before_deploy:
  - powershell -File ci/prepare-deploy-appveyor.ps1

artifacts:
  - path: dist\$(TARGET)\rustup-init.exe
    name: rustup-init
  - path: dist\$(TARGET)\rustup-init.exe.sha256
    name: rustup-init-sha
  - path: dist\$(TARGET)\rustup-setup.exe
    name: rustup-setup
  - path: dist\$(TARGET)\rustup-setup.exe.sha256
    name: rustup-setup-sha

deploy:
  - provider: S3
    skip_cleanup: true
    access_key_id: $(AWS_ACCESS_KEY_ID)
    secret_access_key: $(AWS_SECRET_ACCESS_KEY)
    bucket: dev-static-rust-lang-org
    set_public: true
    region: us-west-1
    artifact: rustup-init,rustup-init-sha,rustup-setup,rustup-setup-sha
    folder: rustup
    on:
      branch: stable
