environment:
  matrix:
  - TARGET: x86_64-pc-windows-msvc
    BITS: 64
  - TARGET: i686-pc-windows-msvc
    BITS: 32
  - TARGET: x86_64-pc-windows-gnu
    BITS: 64
  - TARGET: i686-pc-windows-gnu
    BITS: 32
  access_token:
    secure: CZlbQEamQxfTbQJlLl/3QfVLhVxk+1sBFMxuCN3dwHKeGHNBSE4tQudXSJ5n0Z6P
install:
  - ps: |
      # Install Rust
      Start-FileDownload "https://static.rust-lang.org/dist/rust-nightly-${env:TARGET}.exe" -FileName "rust-nightly.exe"
      .\rust-nightly.exe /VERYSILENT /NORESTART /DIR="C:\rust" | Out-Null
      $env:PATH="$env:PATH;C:\rust\bin"
      
      # OpenSSL must be linked statically
      $env:OPENSSL_STATIC="1"
      
      # For -gnu builds
      if ($env:TARGET -match "-gnu$") {
        $env:PATH="$env:PATH;C:\msys64\mingw${env:BITS}\bin"
        $env:OPENSSL_INCLUDE_DIR="C:\msys64\mingw${env:BITS}\include"
        $env:OPENSSL_LIB_DIR="C:\msys64\mingw${env:BITS}\lib"
        $env:OPENSSL_LIBS="crypto:ssl"
      }
      
      # For -msvc builds
      if ($env:TARGET -match "-msvc$") {
        # Install OpenSSL
        Start-FileDownload "http://www.npcglib.org/~stathis/downloads/openssl-1.0.2d-vs2015.7z" -FileName "openssl.7z"
        7z x openssl.7z -o"C:\OpenSSL"
      
        $env:OPENSSL_INCLUDE_DIR="C:\OpenSSL\openssl-1.0.2d-vs2015\include"
        if ($env:BITS -eq "32") {
          $env:OPENSSL_LIB_DIR="C:\OpenSSL\openssl-1.0.2d-vs2015\lib"
        } else {
          $env:OPENSSL_LIB_DIR="C:\OpenSSL\openssl-1.0.2d-vs2015\lib64"
        }
        $env:OPENSSL_LIBS="ssleay32MT:libeay32MT"
      }
      
      # Print version info
      rustc -vV
      cargo -vV
      
      # Configure git
      git config --global user.email "diggsey@googlemail.com"
      git config --global user.name "Diggory Blake (via Appveyor CI)"
      git config --global push.default simple

build_script:
  - ps: |
      if ($env:TARGET -match "-gnu$") {
        cargo rustc --release --bin multirust-rs -- -C link-args="-lgdi32 -luser32"
      }
      if ($env:TARGET -match "-msvc$") {
        cargo rustc --release --bin multirust-rs -- -C link-args="gdi32.lib user32.lib"
      }
      # Generate hashes
      Get-FileHash .\target\release\* | ForEach-Object {[io.file]::WriteAllText($_.Path + ".sha256", $_.Hash.ToLower() + "`n")}
test_script:
  - tests\cli.bat
notifications:
  - provider: Webhook
    url: https://webhooks.gitter.im/e/9907ad94eb7a5ff291c3
on_success:
  - ps: |
      if (!$env:APPVEYOR_PULL_REQUEST_NUMBER) {
        if ($env:APPVEYOR_REPO_BRANCH -eq "master") {
          $bin = "binaries\$env:TARGET"
        } else {
          $bin = "binaries\$env:APPVEYOR_REPO_BRANCH\$env:TARGET"
        }
        
        git config --global credential.helper store
        Add-Content "$env:USERPROFILE\.git-credentials" "https://$($env:access_token):x-oauth-basic@github.com`n"
        git submodule init
        git submodule update --depth 1 --remote
        if not exist "$bin" mkdir "$bin"
        del /Q "$bin"
        copy /B /Y "target\release\*" "$bin"
        git rev-parse HEAD > "$bin\commit.txt"
        cd binaries
        git checkout master
        git add -A
        git commit -m "Auto-update $env:APPVEYOR_REPO_BRANCH/$env:TARGET binaries (Appveyor CI)"
        $attempts = 1; do { .\push-changes.bat; $attempts++ } while($lastexitcode -ne '0' -and $attempts -le 5)
      }
